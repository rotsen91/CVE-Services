const express = require('express')
const config = require('config')
const cors = require('cors')
const morgan = require('morgan')
const mongoose = require('mongoose')
const helmet = require('helmet')
const mw = require('./middleware/middleware')
const logger = require('./middleware/logger')
const configureRoutes = require('./routes.config')
const CONSTANTS = require('./constants')
const app = express()
const mongoSanitize = require('express-mongo-sanitize');
const rateLimit = require('express-rate-limit');

require('dotenv').config() // This enables us to read from the .env file.

if (process.env.NODE_ENV === 'development') {
  // Concise output colored by response status for development use.
  app.use(morgan('dev'))
  app.use((req, res, next) => {
    res.set({
      'X-Server': 'CVE-Services-Dev-REST-API',
      'X-Server-Type': 'REST'
    })
    next()
  })
} else {
  // Standard Apache common log output.
  app.use(morgan('combined'))
}
const limit = rateLimit({
  max: 300,// limit each IP to 300 requests per windowMs
  windowMs: 15 * 60 * 1000, // 15 min  
  message: 'Too many requests' // message to send
});
// Rate Limiting
app.use(limit);
// Data Sanitization against NoSQL Injection Attacks
app.use(mongoSanitize);
app.use(cors())
app.use(helmet()) // Provides standard security <https://www.npmjs.com/package/helmet>

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
app.use('/api/', mw.createCtxAndReqUUID)
// Make mongoose connection available globally
global.mongoose = mongoose

//* ********Middleware Config*********** */
//* ********Middleware Config END*********** */

//* ************API Routes Setup*********** */
configureRoutes(app)
//* ********API Routes Setup END*********** */

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

logger.info(`Using NODE_ENV '${process.env.NODE_ENV}' and app environment '${appEnv}'`)
logger.info('Using dbName = ' + config.get(`${appEnv}.database`))

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error('Connection Error: Something went wrong!')
})

db.once('open', () => {
  // we're connected!
  logger.info(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)

  const port = process.env.PORT || config.get('port')
  app.listen(port, () => logger.info(`Serving on port ${port}`))
})
